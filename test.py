# # import boto3
# # import pprint as pp
# # import io
# # client=boto3.client('s3',aws_access_key_id="AKIAJ3R7O7X5DXLQWT6A",
# #                       aws_secret_access_key="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",
# #                       region_name="eu-west-1")
# # response = client.list_buckets()
# # response1 = client.list_objects(Bucket="file.server.1")
# # pp.pprint(response1)
# # import amazon_s3_connection as s3
# # def list_objects():
# #     s3.list_objects("file.server.1")
# # list_objects()
#
# # response2 = client.list_objects(Bucket="file.server.1",Delimiter = "/")
# # response3 = client.list_objects(Bucket="file.server.1",Delimiter = "/Folder1") # Displays all the file with Folder1 in its name
# # response4 = client.list_objects(Bucket="file.server.1",Delimiter = "/Folder1",Prefix="Folder1")
# # response5 = client.list_objects(Bucket="file.server.1",Delimiter = "Folder1/",Prefix="Folder1")
# # response6 = client.list_objects(Bucket="file.server.1",Delimiter = "/",Prefix="Folder1")
# # response7 = client.list_objects(Bucket="file.server.1",Delimiter = "/Folder1",Prefix="Child-Folder-1")
# #
#
# # from boto3.s3.connection import S3Connection
# # conn = S3Connection("AKIAI3P6PI7XFSVLVZIA", "dRIzQePqNxoYDL7UMslPkzNEubf5it78r9wbSVV")
# # bucket = conn.get_bucket("file.server.1")
# #
# # response11 = client.list_objects(Bucket="file.server.1",Delimiter = "/") #root level
# # response12 = client.list_objects(Bucket="file.server.1",Delimiter = "/Folder1",Prefix="Folder1")
# # response13 = client.list_objects(Bucket="file.server.1",Delimiter = "/Folder1",Prefix="Folder1/Child-Folder-1")
# # # pp.pprint(response13)
# # response14 = client.get_object(
# #     Bucket="file.server.1",Key="Folder1/Child-Folder-1/main-qimg-472b917299d6f7ce9797c89ff864b0aa.png")
# # # with io.FileIO('passport.tiff', 'w') as file:
# # #     for b in response14["Body"]._raw_stream:
# # #         file.write(b)
# #
# #
# # pp.pprint(response14["Body"].read())
#
# # import pprint as pp
# # import re
# # value = {
# #     "bucketData": [
# #         {
# #             "lastModified": "2018-12-05 20:18:45+00:00",
# #             "objectName": "Folder1/",
# #             "owner": "ramalins",
# #             "size": 0
# #         },
# #         {
# #             "lastModified": "2018-12-05 20:19:11+00:00",
# #             "objectName": "Folder1/Child-Folder-1/",
# #             "owner": "ramalins",
# #             "size": 0
# #         },
# #         {
# #             "lastModified": "2018-12-05 21:51:49+00:00",
# #             "objectName": "Folder1/Child-Folder-1/file-server.pem",
# #             "owner": "ramalins",
# #             "size": 1696
# #         },
# #         {
# #             "lastModified": "2018-12-05 22:15:14+00:00",
# #             "objectName": "Folder1/Child-Folder-1/main-qimg-472b917299d6f7ce9797c89ff864b0aa.png",
# #             "owner": "ramalins",
# #             "size": 163803
# #         },
# #         {
# #             "lastModified": "2018-12-05 22:06:22+00:00",
# #             "objectName": "file-server.pem",
# #             "owner": "ramalins",
# #             "size": 1696
# #         }
# #     ],
# #     "bucketName": "file.server.1"
# # }
#
# # rjson = {}
# # rjson["name"] = value["bucketName"]
# # rjson["children"]=[]
#
#
#
# #
# #
# # def data_structure_transformer(value):
# #     import pprint as pp
# #     import re
# #
# #     def leaf_assignemnt(object,root_folder_name):
# #         temp = {}
# #         temp["name"] = object["objectName"].replace(root_folder_name,"").strip()
# #         temp["value"] = object["size"]
# #         return temp
# #
# #     def branch_assignment(name):
# #         temp ={}
# #         temp["name"] = name
# #         temp["children"] = None
# #         return temp
# #
# #     def path_finder(start_position,folder):
# #         for a in start_position["children"]:
# #             if a["name"] == folder:
# #                 if a["children"] == None:
# #                     a["children"] = []
# #                 return a
# #
# #     folder_name = ""
# #     for i in value["bucketData"]:
# #         print(i)
# #         print(folder_name)
# #         file_extension = re.compile("([a-zA-Z0-9\s_\\.\-\(\):])+(\....)$")
# #         if folder_name == "" or folder_name not in i["objectName"] :
# #             print("inside--1f")
# #             if "/" in i["objectName"] and i["objectName"].count("/") == 1:
# #                 folder_name = i["objectName"]
# #                 rjson["children"].append(branch_assignment(i["objectName"].replace("/","").strip()))
# #             elif file_extension.search(i["objectName"]) and "/" not in i["objectName"] :
# #                 rjson["children"].append(leaf_assignemnt(i,folder_name))
# #         else:
# #             print("inside--1")
# #             splitted_root = folder_name.split("/")
# #             print(splitted_root)
# #             start_position = rjson
# #             for each_split in splitted_root:
# #                 if each_split != "":
# #                     start_position = path_finder(start_position,each_split)
# #                     print(start_position)
# #             if file_extension.search(i["objectName"]) and folder_name in i["objectName"]:
# #                 print("inside file")
# #                 start_position["children"].append(leaf_assignemnt(i,folder_name))
# #             elif folder_name in i["objectName"]:
# #                 start_position["children"].append(branch_assignment(i["objectName"].replace(folder_name,"").replace("/","")))
# #                 folder_name = i["objectName"]
# #             else:
# #                 rjson["children"].append(leaf_assignemnt(i, folder_name))
# #
# #     pp.pprint(rjson)
# #     return rjson
# #
# #
# # data_structure_transformer(value)
#
#
#
#
#
# # BUCKET_NAME = 'file.server.1' # replace with your bucket name
# # KEY = 'Folder1/Child-Folder-1/main-qimg-472b917299d6f7ce9797c89ff864b0aa.png' # replace with your object key
#
# # s3 = boto3.resource('s3',aws_access_key_id="AKIAIVLJX3CP2JRLIRUQ",
# #                       aws_secret_access_key="9mvOwdTqSliW4avwJh0AA2plqf3LArVjwQHReoJm",
# #                       region_name="eu-west-1")
# #
# # try:
# #     s3.Bucket(BUCKET_NAME).download_file(KEY, 'my_local_image.jpg')
# # except botocore.exceptions.ClientError as e:
# #     if e.response['Error']['Code'] == "404":
# #         print("The object does not exist.")
# #     else:
# #         raise
#
# # response14 = client.get_object( Bucket="file.server.1",Key="Folder1/Child-Folder-1/file-server.pem")
# # from io import BytesIO
# # import numpy as np
# # # print(np.load(BytesIO(response14['Body'].read())))
# # pp.pprint(response14["Body"].read())
# #
# # import boto3
# # import botocore
# # import pprint as pp
# #
# # client=boto3.client('s3',aws_access_key_id="AKIAIVLJX3CP2JRLIRUQ",
# #                       aws_secret_access_key="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",
# #                       region_name="eu-west-1")
# # #
# # #
# # # client.meta.client.upload_file('/tmp/hello.txt', 'file.server.1', 'hello.txt')
# # import json

# #
# # # print(data[0]["file"])
# # import base64
# # import re
# #
# # def decode_base64(data, altchars=b'+/'):
# #     """Decode base64, padding being optional.
# #
# #     :param data: Base64 data as an ASCII byte string
# #     :returns: The decoded byte string.
# #
# #     """
# #     data = re.sub(rb'[^a-zA-Z0-9%s]+' % altchars, b'', data)  # normalize
# #     missing_padding = len(data) % 4
# #     if missing_padding:
# #         data += b'='* (4 - missing_padding)
# #     return base64.b64decode(data, altchars)
# # # client.meta.client.upload_file('/tmp/hello.txt', 'file.server.1', 'hello.txt')
# # # print( data[0]["file"])
# #
# # # client.put_object(Bucket='file.server.1', ACL='public-read',Body=base64.b64decode(file.read()),key =data[0]["name"] )
# #
# # # print(base64.decodestring(data[0]["file"]).e)
# #
# # sample = b''
# # # decode_base64(sample)
# # base64.b64decode(sample)
# #
# # client.put_object(Bucket='file.server.1', ACL='public-read',Body=base64.b64decode(sample),Key =data[0]["name"] )
# import pprint as pp
# import re
# value = {'bucketData': [{'lastModified': '2018-12-05 20:18:45+00:00',
#                  'objectName': 'Folder1/',
#                  'owner': 'ramalins',
#                  'size': 0},
#                 {'lastModified': '2018-12-05 20:19:11+00:00',
#                  'objectName': 'Folder1/Child-Folder-1/',
#                  'owner': 'ramalins',
#                  'size': 0},
#                 {'lastModified': '2019-01-09 23:11:54+00:00',
#                  'objectName': 'Folder1/Child-Folder-1//Hod_LOR_sethu.pdf',
#                  'owner': 'ramalins',
#                  'size': 428784},
#                 {'lastModified': '2019-01-09 23:24:06+00:00',
#                  'objectName': 'Folder1/Child-Folder-1/I901_payment_confirmation_01042017.PDF',
#                  'owner': 'ramalins',
#                  'size': 3174},
#                 {'lastModified': '2019-01-09 23:22:33+00:00',
#                  'objectName': 'Folder1/Child-Folder-1/LSU.pdf',
#                  'owner': 'ramalins',
#                  'size': 199895},
#                 {'lastModified': '2019-01-09 23:24:08+00:00',
#                  'objectName': 'Folder1/Child-Folder-1/aadhar.pdf',
#                  'owner': 'ramalins',
#                  'size': 390241},
#                 {'lastModified': '2018-12-05 21:51:49+00:00',
#                  'objectName': 'Folder1/Child-Folder-1/file-server.pem',
#                  'owner': 'ramalins',
#                  'size': 1696},
#                 {'lastModified': '2018-12-05 22:15:14+00:00',
#                  'objectName': 'Folder1/Child-Folder-1/main-qimg-472b917299d6f7ce9797c89ff864b0aa.png',
#                  'owner': 'ramalins',
#                  'size': 163803},
#                 {'lastModified': '2018-12-05 20:19:11+00:00',
#                  'objectName': 'Folder1/Child-Folder-1/child-folder-2/',
#                  'owner': 'ramalins',
#                  'size': 0},
#                 {'lastModified': '2019-01-09 23:29:57+00:00',
#                  'objectName': 'Folder1/Data ScienceTech Institute.pdf',
#                  'owner': 'ramalins',
#                  'size': 196774},
#                 {'lastModified': '2019-01-09 23:38:47+00:00',
#                  'objectName': 'Folder1/Michigan_sop .pdf',
#                  'owner': 'ramalins',
#                  'size': 206058},
#                 {'lastModified': '2019-01-10 18:06:51+00:00',
#                  'objectName': 'Folder1/aadhar.pdf',
#                  'owner': 'ramalins',
#                  'size': 390241},
#                 {'lastModified': '2019-01-09 19:42:24+00:00',
#                  'objectName': 'JBDA_Jig14047.pdf',
#                  'owner': 'ramalins',
#                  'size': 61617},
#                 {'lastModified': '2018-12-05 22:06:22+00:00',
#                  'objectName': 'file-server.pem',
#                  'owner': 'ramalins',
#                  'size': 1696},
#                 {'lastModified': '2019-01-09 23:03:50+00:00',
#                  'objectName': 'gre.pdf',
#                  'owner': 'ramalins',
#                  'size': 333384},
#                 {'lastModified': '2018-12-15 01:10:43+00:00',
#                  'objectName': 'users/',
#                  'owner': 'ramalins',
#                  'size': 0},
#                 {'lastModified': '2018-12-15 01:11:06+00:00',
#                  'objectName': 'users/child-user/',
#                  'owner': 'ramalins',
#                  'size': 0},
#                         {'lastModified': '2018-12-15 01:11:06+00:00',
#                          'objectName': 'users/child-user/child-user-2/',
#                          'owner': 'ramalins',
#                          'size': 0}
#                         ],
#  'bucketName': 'file.server.1'}
#
#
# rjson = {}
# rjson["name"] = value["bucketName"]
# rjson["children"] = []
# file_extension_regex = re.compile("([a-zA-Z0-9\s_\\.\-\(\):])+(\....)$")
#
#
# def branch_assignment(original_name, name):
#     temp = {}
#     temp["name"] = name
#     temp["trueName"] = original_name
#     temp["children"] = []
#     return temp
#
# def leaf_assignemnt(object):
#     temp = object["objectName"].split("/")
#     del temp[-1]
#     root_folder_name = "/".join(temp) + "/"
#     temp = {}
#     temp["name"] = object["objectName"].replace(root_folder_name, "").strip()
#     temp["trueName"] = object["objectName"]
#     temp["value"] = round(object["size"] / 1024, 2)
#     return temp
#
# def path_finder(start_position, folder):
#     if start_position["children"] == []:
#         print("if")
#         return start_position
#     else:
#         print("else")
#         for a in start_position["children"]:
#             if a["name"] == folder:
#                 print(1)
#                 return a
#         return start_position
#
#
# start_position = rjson
# previous_split = ""
# file_extension = re.compile("([a-zA-Z0-9\s_\\.\-\(\):])+(\....)$")
# for i in value["bucketData"]:
#     if file_extension_regex.search(i["objectName"]) and "/" not in i["objectName"]:
#         rjson["children"].append(leaf_assignemnt(i))
#
#     elif i["objectName"].endswith('/') or file_extension.search(i["objectName"]):
#
#         if file_extension.search(i["objectName"]):
#             splitted_root = list(filter(None,i["objectName"].split("/")))
#             # print(splitted_root)
#             del splitted_root[-1]
#             # print(splitted_root)
#         else:
#             splitted_root = list(filter(None, i["objectName"].split("/")))
#         # print(splitted_root)
#         # print(previous_split)
#         # # print(start_position)
#         if previous_split not in splitted_root:
#             start_position = rjson
#         for each_split in splitted_root:
#             start_position = path_finder(start_position, each_split)
#         print("previous_split",previous_split)
#         if file_extension.search(i["objectName"]):
#             if previous_split in i["objectName"]:
#                 print(3)
#                 print(i["objectName"])
#                 start_position["children"].append(leaf_assignemnt(i))
#             else:
#                 # print(4)
#                 # print(i["objectName"])
#                 # temp = i["objectName"].split("/")
#                 # del temp[-1]
#                 start_position["children"].append(leaf_assignemnt(i))
#         else:
#             start_position["children"].append(branch_assignment(i["objectName"],i["objectName"].replace(previous_split,"").replace("/", "").strip() ))
#             previous_split = i["objectName"]
#
#
#
#
# pp.pprint(rjson)
#
#
#
#
#
# import boto3
# import botocore
# import pprint as pp

# client=boto3.client('s3',aws_access_key_id="AKIAIVLJX3CP2JRLIRUQ",
#                       aws_secret_access_key="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",
#                       region_name="eu-west-1")
#
# objects = {'Objects': [{'Key': 'Folder1/Child-Folder-1/main-qimg-472b917299d6f7ce9797c89ff864b0aa.png'}]}
# result = client.delete_objects(Bucket='file.server.1', Delete=objects)
#
# print(client.generate_presigned_url('get_object', Params = {'Bucket': 'file.server.1', 'Key': 'Folder1/Child-Folder-1/'}, ExpiresIn = 500))
# import redis
# r = redis.Redis(host='localhost', port=6379, db=0)
# r.set('foo', 'bar')
# print(r.get('foo'))
# details = {"/users":"9mvOwdTqSliW4avwJh0AA2plqf3LArVjwQHReoJm","timestamp":"10:30"}
# result = r.hmset("cache", details)
# print(result)
# result2 = r.expire("cache", 60)
# print(result2)
# print(r.ttl("cache"))
# print(type(r.hmget("cache","timestamp")[0]))
# print(r.exists("cache"))
# print(r.hmget("Books/Books/Reading List/code-complete-2nd-edition-v413hav.pdf","content"))
# print(r.get("Books/Books/Reading List/code-complete-2nd-edition-v413hav.pdf"))
# r.flushall()
# print(
#     r.keys()
# )

# print(r.type("Books/Books/Reading List/code-complete-2nd-edition-v413hav.pdf"))
#
# r.set("lock:Books/Books/play/","No",ex = 60)
# #
#
#
# result = r.get("test")
# print(result)
# print(r.ttl("lock:Books/Reading List/"))

# test = [True,True,False]
#
# print(test.__contains__(False))


# file Books/Books/Reading List/scala/
# # name motivation.pdf
# # file Books/Books/Reading List/scala/play/
# # name
# backup:Books/Books/Reading List/.*
# print(r.keys())
# print(r.keys(pattern = "backup:"+"Books/Books/Reading List/"+"*"))

# test = "backup:Books/Books/Reading List/"
# print(test.replace("backup:", "").strip())

# import mongo_connection as mc
#
# colleaction = mc.return_collection("users_access_data")
# mc.delete_many([{'owner': 'sethuram', 'file': 'motivation.pdf'}],colleaction)


# print(r.keys())
# print(r.get("lock:motivation.pdf"))


# collection = mc.return_collection("users_access_data")
# parameter = {"file":"motivation.pdf"}
# metadata = mc.find_one(parameter,collection)
# print(metadata)
# collection.insert_many(
# [{ 'owner': 'sethuram', 'file': 'main-qimg-472b917299d6f7ce9797c89ff864b0aa.png',
#    'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}])

# from pymongo import MongoClient
#
# client = MongoClient()
# database = client.authentication_db
# collection = database.user_access_request
#
# parameter = {"file": "motivation.pdf"}
# filter = {'$set':{
#
# }}
# metadata = mc.find_one_and_update(parameter,)

# filter = {"username":"reddy"}
# for grid_data in collection.find(filter, no_cursor_timeout=True):
#     del grid_data['_id']
#     print(grid_data)

# access_collection = mc.return_collection("user_access_request")
# parameter = {"file": "motivation.pdf","owner":"sethuram"}
# print(parameter)
# update_record = {"name":"reddy","read":True}
# metadata = mc.find_one(parameter, access_collection)
# result = {'owner': 'sethuram', 'file': 'motivation.pdf', 'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}
# result["accessing_users"].append(update_record)
#
# print(result)
# updateResult    = access_collection.replace_one(parameter,result)
#
# print(updateResult)
# filter = {"owner":"sethuram"}
# print(filter)
# def find(filter,collection):
#     results = []
#     for grid_data in collection.find(filter,no_cursor_timeout=True):
#         del grid_data['_id']
#         results.append(grid_data)
#     return results
# for grid_data in access_collection.find(filter,no_cursor_timeout=True):
#     del grid_data['_id']
#     print(grid_data)

# print(find(filter,access_collection))
#
# test = [
#     {'owner': 'reddy', 'file': 'motivation.pdf', 'accessing_users':
#         [
#             {'name': 'reddy', 'read': True, 'write': True, 'delete': True},
#             {'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}]
#
# data = []
# for j in test:
#     temp = {}
#     temp["file"] = j["file"]
#     for i in j["accessing_users"]:
#         temp ["name"] = i["name"]
#         temp["access"] = ""
#         if True == i["read"]: temp["access"] = temp["access"]+"read "
#         if True == i["write"]:temp["access"] = temp["access"] + "write "
#         if True == i["delete"]: temp["access"] = temp["access"] + "delete"
#
#     data.append(temp)
#
# print(data)


#
# import mongo_connection as mc
# import pprint as pp
# access_collection = mc.return_collection("users_access_data")
# filter = {"accessing_users":
#               {"$not":
#                    {"$elemMatch":
#                         {'name': 'reddy' }
#                     }
#                }
#           }


# filter = {"accessing_users.name": "sethuram" }
# filter = {"accessing_users.name":{"$not": { "$ne": "sethuram" } }}
# filter = { "accessing_users.name": { "$exists": True, "$ne":"sethuram" } }
# pp.pprint(mc.find(filter,access_collection))

# data =[{'owner': 'sethuram', 'file': 'Books/', 'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}, {'owner': 'sethuram', 'file': 'Books/play/', 'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}, {'owner': 'sethuram', 'file': 'Books/scala/', 'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}, {'owner': 'sethuram', 'file': 'Books/Reading List/', 'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}, {'name': 'reddy', 'read': True}]}, {'owner': 'sethuram', 'file': 'Books/Reading List/code-complete-2nd-edition-v413hav.pdf', 'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}, {'owner': 'sethuram', 'file': 'Books/play/Play Framework Essentials.pdf', 'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}, {'owner': 'sethuram', 'file': 'Books/scala/main-qimg-472b917299d6f7ce9797c89ff864b0aa.png', 'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}, {'owner': 'sethuram', 'file': 'Books/play/motivation.pdf', 'accessing_users': [{'name': 'sethuram', 'read': True, 'write': True, 'delete': True}]}]
# print("----------------data-------------")
# pp.pprint(data)
# import amazon_s3_connection as s3
# def getAccessedRecords(username):
#     """ This function is used to get the user's records accessed by others"""
#
#     access_collection = mc.return_collection("users_access_data")
#     { $where: function()
#     {
#     return (hex_md5(this.name) == "9b53e667f30cd329dca1ec9e6a83e994")
#     }}
#     filter = {"username": username}
#     result = mc.find(filter, access_collection)
#     return (result)
#
# print(getAccessedRecords("reddy"))


"""     Requested screen works fine now  """

"""       admin
           
           [overview] 
             
                    info about user's files accesses by others -- done
           
           
           """
#
# from kafka import KafkaConsumer
# from pymongo import MongoClient
# from json import loads
# class consume:
#     consumer = KafkaConsumer(
#         'numtest',
#          bootstrap_servers=['localhost:9092'],
#          auto_offset_reset='earliest',
#          enable_auto_commit=True,
#          group_id='my-group',
#          key_deserializer=lambda x: x.decode('utf-8'),
#          value_deserializer=lambda x: loads(x.decode('utf-8')))
#     for message in consumer:
#         message = message
#         print(message)

import random, string
x = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
print(x)

import hashlib

def encrypt_string(hash_string):
    sha_signature = \
        hashlib.sha256(hash_string.encode()).hexdigest()
    return sha_signature
sha_signature = encrypt_string(x)
print(sha_signature)
# 3fef7ff0fc1660c6bd319b3a8109fcb9f81985eabcbbf8958869ef03d605a9eb